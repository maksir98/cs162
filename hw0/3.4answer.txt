1. Generate recurse.S and find which instruction(s) corresponds to the recursive call of recur(i - 1).
	movl	8(%ebp), %eax
	subl	$1, %eax                // i - 1
	subl	$12, %esp
	pushl	%eax
	call	recur

2. What do the .text and .data sections contain?
.text contains the actual executable instruction.
.data contains the static data which is not stored in stack.

3. What command do we use to view the symbols in an ELF file?
objdump -t <file>

4. What do the g, O, F, and *UND* flags mean?
"g" the symbol is a global
"O" the symbol is the name of an object
"F" the symbol is the name of a function
"*UND*" the section is referenced in the file being dumped, but not defined there 

5. Where else can we find a symbol for recur? Which file is this in? Copy and paste the relevant portion of the symbol table.
00000000         *UND*  00000000 recur
00000000 g     F .text  00000052 recur

6. Examine the symbol table of the entire map program now. What has changed?
SYMBOL TABLE:
0000000000000238 l    d  .interp        0000000000000000              .interp
0000000000000254 l    d  .note.ABI-tag  0000000000000000              .note.ABI-tag
0000000000000274 l    d  .note.gnu.build-id     0000000000000000              .note.gnu.build-id
0000000000000298 l    d  .gnu.hash      0000000000000000              .gnu.hash
00000000000002b8 l    d  .dynsym        0000000000000000              .dynsym
0000000000000378 l    d  .dynstr        0000000000000000              .dynstr
0000000000000404 l    d  .gnu.version   0000000000000000              .gnu.version
0000000000000418 l    d  .gnu.version_r 0000000000000000              .gnu.version_r
0000000000000438 l    d  .rela.dyn      0000000000000000              .rela.dyn
00000000000004f8 l    d  .rela.plt      0000000000000000              .rela.plt
0000000000000528 l    d  .init  0000000000000000              .init
0000000000000540 l    d  .plt   0000000000000000              .plt
0000000000000570 l    d  .plt.got       0000000000000000              .plt.got
0000000000000580 l    d  .text  0000000000000000              .text
0000000000000784 l    d  .fini  0000000000000000              .fini
0000000000000790 l    d  .rodata        0000000000000000              .rodata
0000000000000798 l    d  .eh_frame_hdr  0000000000000000              .eh_frame_hdr
00000000000007e0 l    d  .eh_frame      0000000000000000              .eh_frame
0000000000200db0 l    d  .init_array    0000000000000000              .init_array
0000000000200db8 l    d  .fini_array    0000000000000000              .fini_array
0000000000200dc0 l    d  .dynamic       0000000000000000              .dynamic
0000000000200fb0 l    d  .got   0000000000000000              .got
0000000000201000 l    d  .data  0000000000000000              .data
0000000000201014 l    d  .bss   0000000000000000              .bss
0000000000000000 l    d  .comment       0000000000000000              .comment
0000000000000000 l    d  .debug_aranges 0000000000000000              .debug_aranges
0000000000000000 l    d  .debug_info    0000000000000000              .debug_info
0000000000000000 l    d  .debug_abbrev  0000000000000000              .debug_abbrev
0000000000000000 l    d  .debug_line    0000000000000000              .debug_line
0000000000000000 l    d  .debug_str     0000000000000000              .debug_str
0000000000000000 l    df *ABS*  0000000000000000              crtstuff.c
00000000000005b0 l     F .text  0000000000000000              deregister_tm_clones
00000000000005f0 l     F .text  0000000000000000              register_tm_clones
0000000000000640 l     F .text  0000000000000000              __do_global_dtors_aux
0000000000201014 l     O .bss   0000000000000001              completed.7698
0000000000200db8 l     O .fini_array    0000000000000000              __do_global_dtors_aux_fini_array_entry
0000000000000680 l     F .text  0000000000000000              frame_dummy
0000000000200db0 l     O .init_array    0000000000000000              __frame_dummy_init_array_entry
0000000000000000 l    df *ABS*  0000000000000000              map.c
0000000000000000 l    df *ABS*  0000000000000000              recurse.c
0000000000000000 l    df *ABS*  0000000000000000              crtstuff.c
0000000000000904 l     O .eh_frame      0000000000000000              __FRAME_END__
0000000000000000 l    df *ABS*  0000000000000000
0000000000200db8 l       .init_array    0000000000000000              __init_array_end
0000000000200dc0 l     O .dynamic       0000000000000000              _DYNAMIC
0000000000200db0 l       .init_array    0000000000000000              __init_array_start
0000000000000798 l       .eh_frame_hdr  0000000000000000              __GNU_EH_FRAME_HDR
0000000000200fb0 l     O .got   0000000000000000              _GLOBAL_OFFSET_TABLE_
0000000000000780 g     F .text  0000000000000002              __libc_csu_fini
0000000000000000  w      *UND*  0000000000000000              _ITM_deregisterTMCloneTable
0000000000201000  w      .data  0000000000000000              data_start
0000000000201014 g       .data  0000000000000000              _edata
0000000000000784 g     F .fini  0000000000000000              _fini
0000000000000000       F *UND*  0000000000000000              printf@@GLIBC_2.2.5
00000000000006cd g     F .text  0000000000000043              recur
0000000000201010 g     O .data  0000000000000004              stuff
0000000000000000       F *UND*  0000000000000000              __libc_start_main@@GLIBC_2.2.5
0000000000201000 g       .data  0000000000000000              __data_start
0000000000000000  w      *UND*  0000000000000000              __gmon_start__
0000000000201008 g     O .data  0000000000000000              .hidden __dso_handle
0000000000000790 g     O .rodata        0000000000000004              _IO_stdin_used
0000000000000710 g     F .text  0000000000000065              __libc_csu_init
0000000000000000       F *UND*  0000000000000000              malloc@@GLIBC_2.2.5
0000000000201018 g     O .bss   0000000000000004              foo
0000000000201020 g       .bss   0000000000000000              _end
0000000000000580 g     F .text  000000000000002b              _start
0000000000201014 g       .bss   0000000000000000              __bss_start
000000000000068a g     F .text  0000000000000043              main
0000000000201018 g     O .data  0000000000000000              .hidden __TMC_END__
0000000000000000  w      *UND*  0000000000000000              _ITM_registerTMCloneTable
0000000000000000  w    F *UND*  0000000000000000              __cxa_finalize@@GLIBC_2.2.5
0000000000000528 g     F .init  0000000000000000              _init

7. What segment(s)/section(s) contains recur (the function)?
.text

8. What segment(s)/section(s) contains global variables?
.data

9. Do you see the stack segment anywhere? What about the heap?
No. Because they are dynamically allocated.

10. Based on the output of map, in which direction does the stack grow? Explain.
The direction goes down.

